{"ast":null,"code":"import _objectSpread from\"D:\\\\Projects\\\\live\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import history from'@history';import _ from'@lodash';import auth0Service from'app/services/auth0Service';import firebaseService from'app/services/firebaseService';import jwtService from'app/services/jwtService';import*as MessageActions from'app/store/actions/fuse/message.actions';import*as FuseActions from'app/store/actions/fuse';import firebase from'firebase/app';export var SET_USER_DATA='[USER] SET DATA';export var REMOVE_USER_DATA='[USER] REMOVE DATA';export var USER_LOGGED_OUT='[USER] LOGGED OUT';/**\n * Set user data from Auth0 token data\n */export function setUserDataAuth0(tokenData){var user={role:['admin'],from:'auth0',data:{displayName:tokenData.username,photoURL:tokenData.picture,email:tokenData.email,settings:tokenData.user_metadata&&tokenData.user_metadata.settings?tokenData.user_metadata.settings:{},shortcuts:tokenData.user_metadata&&tokenData.user_metadata.shortcuts?tokenData.user_metadata.shortcuts:[]}};return setUserData(user);}/**\n * Set user data from Firebase data\n */export function setUserDataFirebase(user,authUser){if(user&&user.data&&user.data.settings&&user.data.settings.theme&&user.data.settings.layout&&user.data.settings.layout.style){// Set user data but do not update\nreturn setUserData(user);}// Create missing user settings\nreturn createUserSettingsFirebase(authUser);}/**\n * Create User Settings with Firebase data\n */export function createUserSettingsFirebase(authUser){return function(dispatch,getState){var guestUser=getState().auth.user;var fuseDefaultSettings=getState().fuse.settings.defaults;var _firebase$auth=firebase.auth(),currentUser=_firebase$auth.currentUser;/**\n\t\t * Merge with current Settings\n\t\t */var user=_.merge({},guestUser,{uid:authUser.uid,from:'firebase',role:['admin'],data:{displayName:authUser.displayName,email:authUser.email,settings:_objectSpread({},fuseDefaultSettings)}});currentUser.updateProfile(user.data);updateUserData(user,dispatch);return dispatch(setUserData(user));};}/**\n *\n * Set User Data JWT\n */export function setJWTUserData(authUser){var user={role:[authUser.user_type],data:{id:authUser.id,displayName:authUser.name,email:authUser.email,role:authUser.user_type,photoURL:authUser.photo_url,xid:authUser.user_type==='vendor'?authUser.xid:{}}};return setUserData(user);}/**\n * Set User Data\n */export function setUserData(user){return function(dispatch){/*\n        You can redirect the logged-in user to a specific route depending on his role\n         */ // history.location.state = {\n//     redirectUrl: user.redirectUrl // for example 'apps/academy'\n// }\n/*\n        Set User Settings\n         */ // dispatch(FuseActions.setDefaultSettings(user.data.settings));\n/*\n        Set User Data\n         */dispatch({type:SET_USER_DATA,payload:user});};}/**\n * Update User Settings\n */export function updateUserSettings(settings){return function(dispatch,getState){var oldUser=getState().auth.user;var user=_.merge({},oldUser,{data:{settings:settings}});updateUserData(user,dispatch);return dispatch(setUserData(user));};}/**\n * Update User Shortcuts\n */export function updateUserShortcuts(shortcuts){return function(dispatch,getState){var user=getState().auth.user;var newUser=_objectSpread(_objectSpread({},user),{},{data:_objectSpread(_objectSpread({},user.data),{},{shortcuts:shortcuts})});updateUserData(newUser,dispatch);return dispatch(setUserData(newUser));};}/**\n * Remove User Data\n */export function removeUserData(){return{type:REMOVE_USER_DATA};}/**\n * Logout\n */export function logoutUser(){return function(dispatch,getState){var user=getState().auth.user;if(!user.role||user.role.length===0){// is guest\nreturn null;}history.push({pathname:'/'});switch(user.from){case'firebase':{firebaseService.signOut();break;}case'auth0':{auth0Service.logout();break;}default:{jwtService.logout();}}dispatch(FuseActions.setInitialSettings());return dispatch({type:USER_LOGGED_OUT});};}/**\n * Update User Data\n */function updateUserData(user,dispatch){if(!user.role||user.role.length===0){// is guest\nreturn;}switch(user.from){case'firebase':{firebaseService.updateUserData(user).then(function(){dispatch(MessageActions.showMessage({message:'User data saved to firebase'}));}).catch(function(error){dispatch(MessageActions.showMessage({message:error.message}));});break;}case'auth0':{auth0Service.updateUserData({settings:user.data.settings,shortcuts:user.data.shortcuts}).then(function(){dispatch(MessageActions.showMessage({message:'User data saved to auth0'}));}).catch(function(error){dispatch(MessageActions.showMessage({message:error.message}));});break;}default:{jwtService.updateUserData(user).then(function(){dispatch(MessageActions.showMessage({message:'User data saved with api'}));}).catch(function(error){dispatch(MessageActions.showMessage({message:error.message}));});break;}}}","map":null,"metadata":{},"sourceType":"module"}