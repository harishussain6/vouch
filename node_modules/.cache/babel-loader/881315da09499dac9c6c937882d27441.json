{"ast":null,"code":"import { Chart } from 'react-chartjs-2';\nChart.pluginService.register({\n  afterDatasetsDraw: function afterDatasetsDraw(chart, easing) {\n    // Only activate the plugin if it's made available\n    // in the options\n    if (!chart.options.plugins.xLabelsOnTop || chart.options.plugins.xLabelsOnTop && chart.options.plugins.xLabelsOnTop.active === false) {\n      return;\n    } // To only draw at the end of animation, check for easing === 1\n\n\n    var ctx = chart.ctx;\n    chart.data.datasets.forEach(function (dataset, i) {\n      var meta = chart.getDatasetMeta(i);\n\n      if (!meta.hidden) {\n        meta.data.forEach(function (element, index) {\n          // Draw the text in black, with the specified font\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n          var fontSize = 13;\n          var fontStyle = 'normal';\n          var fontFamily = 'Muli, Roboto, Helvetica Neue, Arial, sans-serif';\n          ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily); // Just naively convert to string for now\n\n          var dataString = \"\".concat(dataset.data[index].toString(), \"k\"); // Make sure alignment settings are correct\n\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          var padding = 15;\n          var startY = 24;\n          var position = element.tooltipPosition();\n          ctx.fillText(dataString, position.x, startY);\n          ctx.save();\n          ctx.beginPath();\n          ctx.setLineDash([5, 3]);\n          ctx.moveTo(position.x, startY + padding);\n          ctx.lineTo(position.x, position.y - padding);\n          ctx.strokeStyle = 'rgba(255,255,255,0.54)';\n          ctx.stroke();\n          ctx.restore();\n        });\n      }\n    });\n  }\n});","map":{"version":3,"sources":["D:/Projects/live/src/react-chartjs-2-defaults.js"],"names":["Chart","pluginService","register","afterDatasetsDraw","chart","easing","options","plugins","xLabelsOnTop","active","ctx","data","datasets","forEach","dataset","i","meta","getDatasetMeta","hidden","element","index","fillStyle","fontSize","fontStyle","fontFamily","font","helpers","fontString","dataString","toString","textAlign","textBaseline","padding","startY","position","tooltipPosition","fillText","x","save","beginPath","setLineDash","moveTo","lineTo","y","strokeStyle","stroke","restore"],"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AAEAA,KAAK,CAACC,aAAN,CAAoBC,QAApB,CAA6B;AAC5BC,EAAAA,iBAD4B,6BACVC,KADU,EACHC,MADG,EACK;AAChC;AACA;AACA,QACC,CAACD,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAvB,IACCJ,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,IAAsCJ,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,CAAmCC,MAAnC,KAA8C,KAFtF,EAGE;AACD;AACA,KAR+B,CAUhC;;;AAVgC,QAWxBC,GAXwB,GAWhBN,KAXgB,CAWxBM,GAXwB;AAahCN,IAAAA,KAAK,CAACO,IAAN,CAAWC,QAAX,CAAoBC,OAApB,CAA4B,UAACC,OAAD,EAAUC,CAAV,EAAgB;AAC3C,UAAMC,IAAI,GAAGZ,KAAK,CAACa,cAAN,CAAqBF,CAArB,CAAb;;AAEA,UAAI,CAACC,IAAI,CAACE,MAAV,EAAkB;AACjBF,QAAAA,IAAI,CAACL,IAAL,CAAUE,OAAV,CAAkB,UAACM,OAAD,EAAUC,KAAV,EAAoB;AACrC;AACAV,UAAAA,GAAG,CAACW,SAAJ,GAAgB,0BAAhB;AACA,cAAMC,QAAQ,GAAG,EAAjB;AACA,cAAMC,SAAS,GAAG,QAAlB;AACA,cAAMC,UAAU,GAAG,iDAAnB;AACAd,UAAAA,GAAG,CAACe,IAAJ,GAAWzB,KAAK,CAAC0B,OAAN,CAAcC,UAAd,CAAyBL,QAAzB,EAAmCC,SAAnC,EAA8CC,UAA9C,CAAX,CANqC,CAQrC;;AACA,cAAMI,UAAU,aAAMd,OAAO,CAACH,IAAR,CAAaS,KAAb,EAAoBS,QAApB,EAAN,MAAhB,CATqC,CAWrC;;AACAnB,UAAAA,GAAG,CAACoB,SAAJ,GAAgB,QAAhB;AACApB,UAAAA,GAAG,CAACqB,YAAJ,GAAmB,QAAnB;AACA,cAAMC,OAAO,GAAG,EAAhB;AACA,cAAMC,MAAM,GAAG,EAAf;AACA,cAAMC,QAAQ,GAAGf,OAAO,CAACgB,eAAR,EAAjB;AACAzB,UAAAA,GAAG,CAAC0B,QAAJ,CAAaR,UAAb,EAAyBM,QAAQ,CAACG,CAAlC,EAAqCJ,MAArC;AAEAvB,UAAAA,GAAG,CAAC4B,IAAJ;AAEA5B,UAAAA,GAAG,CAAC6B,SAAJ;AACA7B,UAAAA,GAAG,CAAC8B,WAAJ,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACA9B,UAAAA,GAAG,CAAC+B,MAAJ,CAAWP,QAAQ,CAACG,CAApB,EAAuBJ,MAAM,GAAGD,OAAhC;AACAtB,UAAAA,GAAG,CAACgC,MAAJ,CAAWR,QAAQ,CAACG,CAApB,EAAuBH,QAAQ,CAACS,CAAT,GAAaX,OAApC;AACAtB,UAAAA,GAAG,CAACkC,WAAJ,GAAkB,wBAAlB;AACAlC,UAAAA,GAAG,CAACmC,MAAJ;AAEAnC,UAAAA,GAAG,CAACoC,OAAJ;AACA,SA7BD;AA8BA;AACD,KAnCD;AAoCA;AAlD2B,CAA7B","sourcesContent":["import { Chart } from 'react-chartjs-2';\n\nChart.pluginService.register({\n\tafterDatasetsDraw(chart, easing) {\n\t\t// Only activate the plugin if it's made available\n\t\t// in the options\n\t\tif (\n\t\t\t!chart.options.plugins.xLabelsOnTop ||\n\t\t\t(chart.options.plugins.xLabelsOnTop && chart.options.plugins.xLabelsOnTop.active === false)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// To only draw at the end of animation, check for easing === 1\n\t\tconst { ctx } = chart;\n\n\t\tchart.data.datasets.forEach((dataset, i) => {\n\t\t\tconst meta = chart.getDatasetMeta(i);\n\n\t\t\tif (!meta.hidden) {\n\t\t\t\tmeta.data.forEach((element, index) => {\n\t\t\t\t\t// Draw the text in black, with the specified font\n\t\t\t\t\tctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n\t\t\t\t\tconst fontSize = 13;\n\t\t\t\t\tconst fontStyle = 'normal';\n\t\t\t\t\tconst fontFamily = 'Muli, Roboto, Helvetica Neue, Arial, sans-serif';\n\t\t\t\t\tctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);\n\n\t\t\t\t\t// Just naively convert to string for now\n\t\t\t\t\tconst dataString = `${dataset.data[index].toString()}k`;\n\n\t\t\t\t\t// Make sure alignment settings are correct\n\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\tconst padding = 15;\n\t\t\t\t\tconst startY = 24;\n\t\t\t\t\tconst position = element.tooltipPosition();\n\t\t\t\t\tctx.fillText(dataString, position.x, startY);\n\n\t\t\t\t\tctx.save();\n\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.setLineDash([5, 3]);\n\t\t\t\t\tctx.moveTo(position.x, startY + padding);\n\t\t\t\t\tctx.lineTo(position.x, position.y - padding);\n\t\t\t\t\tctx.strokeStyle = 'rgba(255,255,255,0.54)';\n\t\t\t\t\tctx.stroke();\n\n\t\t\t\t\tctx.restore();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n});\n"]},"metadata":{},"sourceType":"module"}