{"ast":null,"code":"import _objectSpread from \"D:\\\\Projects\\\\live\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport * as Actions from 'app/store/actions';\nimport * as UserActions from './user.actions';\nexport var REGISTER_ERROR = 'REGISTER_ERROR';\nexport var REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport function submitRegister(_ref) {\n  var displayName = _ref.displayName,\n      password = _ref.password,\n      email = _ref.email;\n  return function (dispatch) {\n    return jwtService.createUser({\n      displayName: displayName,\n      password: password,\n      email: email\n    }).then(function (user) {\n      dispatch(UserActions.setUserData(user));\n      return dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: REGISTER_ERROR,\n        payload: error\n      });\n    });\n  };\n}\nexport function registerWithFirebase(model) {\n  if (!firebaseService.auth) {\n    console.warn(\"Firebase Service didn't initialize, check your configuration\");\n    return function () {\n      return false;\n    };\n  }\n\n  var email = model.email,\n      password = model.password,\n      displayName = model.displayName;\n  return function (dispatch) {\n    return firebaseService.auth.createUserWithEmailAndPassword(email, password).then(function (response) {\n      dispatch(UserActions.createUserSettingsFirebase(_objectSpread(_objectSpread({}, response.user), {}, {\n        displayName: displayName,\n        email: email\n      })));\n      return dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }).catch(function (error) {\n      var usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n      var emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n      var passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n      var response = {\n        email: emailErrorCodes.includes(error.code) ? error.message : null,\n        displayName: usernameErrorCodes.includes(error.code) ? error.message : null,\n        password: passwordErrorCodes.includes(error.code) ? error.message : null\n      };\n\n      if (error.code === 'auth/invalid-api-key') {\n        dispatch(Actions.showMessage({\n          message: error.message\n        }));\n      }\n\n      return dispatch({\n        type: REGISTER_ERROR,\n        payload: response\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/Projects/live/src/app/auth/store/actions/register.actions.js"],"names":["firebaseService","jwtService","Actions","UserActions","REGISTER_ERROR","REGISTER_SUCCESS","submitRegister","displayName","password","email","dispatch","createUser","then","user","setUserData","type","catch","error","payload","registerWithFirebase","model","auth","console","warn","createUserWithEmailAndPassword","response","createUserSettingsFirebase","usernameErrorCodes","emailErrorCodes","passwordErrorCodes","includes","code","message","showMessage"],"mappings":"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","sourcesContent":["import firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport * as Actions from 'app/store/actions';\nimport * as UserActions from './user.actions';\n\nexport const REGISTER_ERROR = 'REGISTER_ERROR';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\n\nexport function submitRegister({ displayName, password, email }) {\n\treturn dispatch =>\n\t\tjwtService\n\t\t\t.createUser({\n\t\t\t\tdisplayName,\n\t\t\t\tpassword,\n\t\t\t\temail\n\t\t\t})\n\t\t\t.then(user => {\n\t\t\t\tdispatch(UserActions.setUserData(user));\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: REGISTER_SUCCESS\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: REGISTER_ERROR,\n\t\t\t\t\tpayload: error\n\t\t\t\t});\n\t\t\t});\n}\n\nexport function registerWithFirebase(model) {\n\tif (!firebaseService.auth) {\n\t\tconsole.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n\t\treturn () => false;\n\t}\n\n\tconst { email, password, displayName } = model;\n\treturn dispatch =>\n\t\tfirebaseService.auth\n\t\t\t.createUserWithEmailAndPassword(email, password)\n\t\t\t.then(response => {\n\t\t\t\tdispatch(\n\t\t\t\t\tUserActions.createUserSettingsFirebase({\n\t\t\t\t\t\t...response.user,\n\t\t\t\t\t\tdisplayName,\n\t\t\t\t\t\temail\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: REGISTER_SUCCESS\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconst usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n\n\t\t\t\tconst emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n\n\t\t\t\tconst passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\n\t\t\t\tconst response = {\n\t\t\t\t\temail: emailErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\t\tdisplayName: usernameErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\t\tpassword: passwordErrorCodes.includes(error.code) ? error.message : null\n\t\t\t\t};\n\n\t\t\t\tif (error.code === 'auth/invalid-api-key') {\n\t\t\t\t\tdispatch(Actions.showMessage({ message: error.message }));\n\t\t\t\t}\n\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: REGISTER_ERROR,\n\t\t\t\t\tpayload: response\n\t\t\t\t});\n\t\t\t});\n}\n"]},"metadata":{},"sourceType":"module"}